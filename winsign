#!/bin/bash

ADCS="ca.ad.lab.home"  # Active Directory Certification Services
TEMPLATE="WebServer"   # Template on ADCS
PFXPWD="changeit"      # Password for pfx

usage() {
cat << EOF

Usage:
  `basename $0` [-t WebServer] [-u AD_Username ] [-p AD_Password] certificate.signing.request [subject.alt.name | subject.IP.address]

  -h, -help,  --help         Display help.
  -t, -temp,  --template     ADCS Template (default: WebServer)
  -u, -user,  --username     Active Directory Username
  -p, -pass,  --password     Active Directory Password

Examples:

  #1: CN={taken from subject in CSR}. SAN, if not in CSR, will include CN from subject in CSR.
  `basename $0` sample_lab_home.csr -u Administrator -p Passw0rd!

  #2: CN={taken from subject in CSR}. SAN, if not in CSR, will include CN from subject in CSR plus email sample@lab.home, IPv4 127.0.0.1, and IPv6 ::1.
  `basename $0` sample_lab_home.csr sample@lab.home 127.0.0.1 ::1

EOF
}

# https://github.com/sfinktah/bash/blob/master/rawurlencode.inc.sh
rawurlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] )  o="${c}" ;;
        * )                printf -v o '%%%02x' "'$c" ;;
     esac
     encoded+="${o}"
  done
  REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}


# $@ is all command line parameters passed to the script.
# -o is for short options like -v
# -l is for long options with double dash like --version
# the comma separates different long options
# -a is for long options with single dash like -version
OPTIONS=$(getopt -l "help,temp:,template:,user:,username:,pass:,password:" -o "Vht:u:p:" -a -- "$@")

# set --:
# If no arguments follow this option, then the positional parameters are unset. Otherwise, the positional parameters
# are set to the arguments, even if some of them begin with a '-'.
eval set -- "$OPTIONS"

while true
do
case "$1" in
-h|--help)
    usage
    exit 0
    ;;
-t|--temp|--template)
    shift
    TEMPLATE="$1"
    ;;
-u|--user|--username)
    shift
    USERNAME="$1"
    ;;
-p|--pass|--password)
    shift
    PASSWORD="$1"
    ;;
--)
    shift
    break;;
esac
shift
done

if [ "x$1" == "x" ]
then
  usage
  exit
fi

REQFILE=$1

if [ ! -f "$REQFILE" ]
then
  echo "${REQFILE} doesn't exists. Please create it before running this script."
  exit 1
fi

# openssl 1.0.x -> subject=/C=AU/ST=Western Australia/L=Perth/O=Home/OU=Lab/CN=www.lab.home
# openssl 1.1.x -> subject=C = AU, ST = Western Australia, L = Perth, O = Home, OU = Lab, CN = www.lab.home
CN=`openssl req -noout -subject -in "$REQFILE" | sed 's/ = /=/g' | sed -n '/^subject/s/^.*CN=//p' | sed 's/\/.*//' | sed 's/,.*//'`

if [[ "x$CN" != "x" ]]
then
  FILE=`echo "$CN" | sed "s/\./_/g" | sed "s/\*/star/g" | sed "s/\/.*//"`
else
  # Remove the extension so we can add our own
  FILE="${REQFILE%.*}"
fi

SAN="dns="$CN
# If CN is a wildcard, add base domain as SAN.
if [[ $CN = "*."* ]]
then
  SAN="$SAN&dns="`echo $CN | sed "s/\*\.//g"`
fi

# Add commandline subject alternates
if [ $# -gt 1 ]
then
    sans=($@)
    i=1
    while [ $i -lt ${#sans[@]} ]
    do
        if [[ ${sans[i]} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            SAN="${SAN}&ipaddress=${sans[i]}"
        elif [[ ${sans[i]} =~ ":" ]]; then  # assume IPv6
            SAN="${SAN}&ipaddress=${sans[i]}"
        elif [[ ${sans[i]} =~ "@" ]]; then  # assume email
            SAN="${SAN}&email=${sans[i]}"
        else
            SAN="${SAN}&dns=${sans[i]}"
        fi
        i=$[$i+1]
    done
fi

SIGNREQ=`cat "$REQFILE" | tr -d '\n\r'`
SIGNREQ=`echo ${SIGNREQ} | sed 's/+/%2B/g'`
SIGNREQ=`echo ${SIGNREQ} | tr -s ' ' '+'`

CERTATTRIB=''
HAS_TEMPLATE=`openssl req -in ${REQFILE} -text -noout | grep -c "1.3.6.1.4.1.311.20.2:"`
HAS_SAN=`openssl req -in ${REQFILE} -text -noout | grep -c "X509v3 Subject Alternative Name:"`

if [ $HAS_TEMPLATE -eq 0 ]
then
    CERTATTRIB="${CERTATTRIB}CertificateTemplate:${TEMPLATE}%0D%0A"
fi

if [ $HAS_SAN -eq 0 ]
then
    rawurlencode "${SAN}"    # Returns in variable REPLY
    CERTATTRIB="${CERTATTRIB}SAN:${REPLY}%0D%0A"
fi

if [[ "x$USERNAME" == "x" ]]; then read -p "Username: " USERNAME; fi
if [[ "x$PASSWORD" == "x" ]]
then
    read -s -p "Password: " PASSWORD
    echo
fi

OUTPUT=`curl -s -k -u "${USERNAME}":${PASSWORD} --ntlm \
"https://${ADCS}/certsrv/certfnsh.asp" \
-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
-H 'Accept-Encoding: gzip, deflate' \
-H 'Accept-Language: en-US,en;q=0.5' \
-H 'Connection: keep-alive' \
-H "Host: ${ADCS}" \
-H "Referer: https://${ADCS}/certsrv/certrqxt.asp" \
-H 'User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko' \
-H 'Content-Type: application/x-www-form-urlencoded' \
--data "Mode=newreq&CertRequest=${SIGNREQ}&CertAttrib=${CERTATTRIB}&TargetStoreFlags=0&SaveCert=yes&ThumbPrint="`

echo "$OUTPUT" | grep "<P ID=locPageTitle>" | sed "s/<P ID=locPageTitle> <B> //" | sed "s/ <\/B>//"

OUTPUTLINK=`echo "$OUTPUT" | grep -A 1 'function handleGetChain() {' | tail -n 1 | cut -d '"' -f 2`

if [ "x${OUTPUTLINK}" == "x" ]
then
    exit 1
fi

CERTLINK="https://${ADCS}/certsrv/${OUTPUTLINK}Enc=b64"

curl -s -k -u "${USERNAME}":${PASSWORD} --ntlm $CERTLINK -o $FILE.p7b \
-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' \
-H 'Accept-Encoding: gzip, deflate' \
-H 'Accept-Language: en-US,en;q=0.5' \
-H 'Connection: keep-alive' \
-H "Host: ${ADCS}" \
-H "Referer: https://${ADCS}/certsrv/certrqxt.asp" \
-H 'User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko'

if [[ `grep -c title $FILE.p7b` -ne 0 ]]
then
    echo
    grep title $FILE.p7b
    exit 1
fi

openssl pkcs7 -print_certs -in $FILE.p7b -inform PEM -out $FILE.txt
openssl x509 -in $FILE.txt -out $FILE.crt
openssl pkcs12 -export -in $FILE.txt -inkey $FILE.key -out $FILE.pfx -name $FILE -password pass:$PFXPWD
